// src/services/shippingCalculator.js
const { getThaiTime } = require("./timeService");

/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ï‡∏£‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤ (CBM)
 * @param {number} width - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á (‡∏ã‡∏°.)
 * @param {number} length - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß (‡∏ã‡∏°.)
 * @param {number} height - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á (‡∏ã‡∏°.)
 * @returns {number} ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ï‡∏£‡πÄ‡∏õ‡πá‡∏ô CBM
 */
function calculateCBM(width, length, height) {
  return (width * length * height) / 1000000;
}

/**
 * ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Rank ‡∏ï‡∏≤‡∏°‡∏¢‡∏≠‡∏î‡∏™‡∏∞‡∏™‡∏°
 * @param {number} accumulatedAmount - ‡∏¢‡∏≠‡∏î‡∏™‡∏∞‡∏™‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ (‡∏ö‡∏≤‡∏ó)
 * @returns {string} Rank ‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
 */
function determineRank(accumulatedAmount) {
  if (accumulatedAmount > 2000000) return "STAR";
  if (accumulatedAmount > 500000) return "DIAMOND";
  return "SILVER";
}

/**
 * ‡∏î‡∏∂‡∏á‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏ï‡∏≤‡∏° Rank ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
 * @param {string} rank - Rank ‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
 * @param {string} productType - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ('general', 'type1-2', 'special')
 * @param {string} shippingMethod - ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á ('land', 'sea')
 * @returns {Object} ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠ ‡∏Å‡∏Å. ‡πÅ‡∏•‡∏∞ CBM
 */
function getShippingRate(rank, productType, shippingMethod) {
  const rates = {
    SILVER: {
      land: {
        general: { perKg: 50, perCBM: 7500 },
        'type1-2': { perKg: 60, perCBM: 8500 },
        special: { perKg: 120, perCBM: 12000 }
      },
      sea: {
        general: { perKg: 45, perCBM: 5400 },
        'type1-2': { perKg: 50, perCBM: 6900 },
        special: { perKg: 120, perCBM: 12000 }
      }
    },
    DIAMOND: {
      land: {
        general: { perKg: 45, perCBM: 7300 },
        'type1-2': { perKg: 55, perCBM: 8300 },
        special: { perKg: 110, perCBM: 11000 }
      },
      sea: {
        general: { perKg: 40, perCBM: 4900 },
        'type1-2': { perKg: 50, perCBM: 6500 },
        special: { perKg: 110, perCBM: 11000 }
      }
    },
    STAR: {
      land: {
        general: { perKg: 40, perCBM: 6800 },
        'type1-2': { perKg: 50, perCBM: 7800 },
        special: { perKg: 100, perCBM: 10000 }
      },
      sea: {
        general: { perKg: 35, perCBM: 4500 },
        'type1-2': { perKg: 45, perCBM: 6300 },
        special: { perKg: 100, perCBM: 10000 }
      }
    }
  };

  return rates[rank][shippingMethod][productType];
}

/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏™‡∏∏‡∏ó‡∏ò‡∏¥
 * @param {number} weight - ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏à‡∏£‡∏¥‡∏á (‡∏Å‡∏Å.)
 * @param {number} cbm - ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ï‡∏£‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤ (CBM)
 * @param {Object} rate - ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏™‡πà‡∏á
 * @returns {Object} ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏™‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
 */
function calculateShippingFee(weight, cbm, rate) {
  const volumetricFee = cbm * rate.perCBM;
  const weightFee = weight * rate.perKg;

  return {
    fee: Math.max(volumetricFee, weightFee),
    method: volumetricFee > weightFee ? 'CBM' : 'WEIGHT'
  };
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Intent ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏™‡πà‡∏á
 * @param {DialogflowAgent} agent - Dialogflow agent
 * @param {FirebaseDatabase} db - Firebase database instance
 */
async function handleShippingCalculation(agent, db) {
  try {
    // ‡∏£‡∏±‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å Dialogflow
    const {
      width,
      length,
      height,
      weight,
      productType = 'general',
      shippingMethod = 'land',
      accumulatedAmount = 0
    } = agent.parameters;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!width || !length || !height || !weight) {
      agent.add("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô (‡∏Å‡∏ß‡πâ‡∏≤‡∏á x ‡∏¢‡∏≤‡∏ß x ‡∏™‡∏π‡∏á ‡πÅ‡∏•‡∏∞‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å)");
      return;
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ
    const cbm = calculateCBM(width, length, height);
    const rank = determineRank(accumulatedAmount);
    const rate = getShippingRate(rank, productType, shippingMethod);
    const { fee, method } = calculateShippingFee(weight, cbm, rate);

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
    const userId = agent.originalRequest?.payload?.data?.source?.userId || "unknown";
    const calculationRef = db.ref(`shipping_calculations/${userId}`);
    await calculationRef.push({
      timestamp: getThaiTime().toISOString(),
      dimensions: { width, length, height },
      weight,
      cbm,
      productType,
      shippingMethod,
      rank,
      fee,
      calculationMethod: method
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
    const response = 
      `üöö ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏™‡πà‡∏á:\n\n` +
      `üì¶ ‡∏Ç‡∏ô‡∏≤‡∏î: ${width}x${length}x${height} ‡∏ã‡∏°.\n` +
      `‚öñÔ∏è ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å: ${weight} ‡∏Å‡∏Å.\n` +
      `üìä ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ï‡∏£: ${cbm.toFixed(3)} CBM\n` +
      `üèÜ Rank: ${rank} Rabbit\n` +
      `üí∞ ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏™‡πà‡∏á: ${fee.toFixed(2)} ‡∏ö‡∏≤‡∏ó\n` +
      `‚ÑπÔ∏è ‡∏Ñ‡∏¥‡∏î‡∏ï‡∏≤‡∏°: ${method === 'CBM' ? '‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ï‡∏£' : '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å'}`;

    agent.add(response);
  } catch (error) {
    console.error("‚ùå Error in handleShippingCalculation:", error);
    agent.add("‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
  }
}

module.exports = {
  calculateCBM,
  determineRank,
  getShippingRate,
  calculateShippingFee,
  handleShippingCalculation
};